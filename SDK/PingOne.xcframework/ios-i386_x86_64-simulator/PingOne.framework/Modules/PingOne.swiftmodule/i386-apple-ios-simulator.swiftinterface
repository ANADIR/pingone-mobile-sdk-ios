// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PingOne
import AVKit
import CommonCrypto
import CoreLocation
import Foundation
import LocalAuthentication
@_exported import PingOne
import Security
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
@objc public enum ErrorCode : ObjectiveC.NSInteger {
  case internalError = 10000
  case deviceTokenIsMissing = 10001
  case unrecognizedRemoteNotification = 10002
  case serverError = 10003
  case noConnectivity = 10004
  case pairingKey = 10005
  case bundleId = 10006
  public typealias RawValue = ObjectiveC.NSInteger
  public init?(rawValue: ObjectiveC.NSInteger)
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public class PingOne : ObjectiveC.NSObject {
  @objc public enum APNSDeviceTokenType : ObjectiveC.NSInteger {
    case production = 0
    case sandbox
    public typealias RawValue = ObjectiveC.NSInteger
    public init?(rawValue: ObjectiveC.NSInteger)
    public var rawValue: ObjectiveC.NSInteger {
      get
    }
  }
  @objc public static func pair(_ pairingKey: Swift.String, completionHandler: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func setDeviceToken(_ deviceToken: Foundation.Data, type: APNSDeviceTokenType, completionHandler: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func getUNNotificationCategories() -> Swift.Set<UserNotifications.UNNotificationCategory>
  @objc public static func processRemoteNotification(_ userInfo: [Swift.AnyHashable : Any], completionHandler: @escaping (NotificationObject?, Foundation.NSError?) -> Swift.Void)
  @objc public static func processRemoteNotificationAction(_ identifier: Swift.String, forRemoteNotification userInfo: [Swift.AnyHashable : Any], completionHandler: @escaping (NotificationObject?, Foundation.NSError?) -> Swift.Void)
  @objc public static func removePingOneLocalData()
  @objc public static func setDevicePairedAfterReinstall(_ stayPaired: Swift.Bool)
  @objc deinit
}
@objc public class NotificationObject : ObjectiveC.NSObject {
  @objc public enum NotificationType : ObjectiveC.NSInteger {
    case none = -1
    case done
    case authentication
    public typealias RawValue = ObjectiveC.NSInteger
    public init?(rawValue: ObjectiveC.NSInteger)
    public var rawValue: ObjectiveC.NSInteger {
      get
    }
  }
  @objc final public let notificationType: NotificationObject.NotificationType
  @objc final public func approve(completionHandler: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc final public func deny(completionHandler: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension ErrorCode : Swift.Equatable {}
extension ErrorCode : Swift.Hashable {}
extension ErrorCode : Swift.RawRepresentable {}
extension APNSDeviceTokenType : Swift.Equatable {}
extension APNSDeviceTokenType : Swift.Hashable {}
extension APNSDeviceTokenType : Swift.RawRepresentable {}
extension NotificationObject.NotificationType : Swift.Equatable {}
extension NotificationObject.NotificationType : Swift.Hashable {}
extension NotificationObject.NotificationType : Swift.RawRepresentable {}
